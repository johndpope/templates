// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if storyboards %}
{% set isAppKit %}{% if platform == "macOS" %}true{% endif %}{% endset %}
{% set prefix %}{% if isAppKit %}NS{% else %}UI{% endif %}{% endset %}
{% set controller %}{% if isAppKit %}Controller{% else %}ViewController{% endif %}{% endset %}
{% set baseType %}{% if isAppKit %}AnyObject{% else %}UIViewController{% endif %}{% endset %}
// swiftlint:disable sorted_imports
import Foundation
import {% if isAppKit %}Cocoa{% else %}UIKit{% endif %}
{% for module in modules where module != env.PRODUCT_MODULE_NAME and module != param.module %}
import {{module}}
{% endfor %}

// swiftlint:disable file_length

{# This first part of the code is static, same every time whatever Storyboard you have #}
protocol StoryboardSceneType {
  static var storyboardName: String { get }
}

extension StoryboardSceneType {
  static func storyboard() -> {{prefix}}Storyboard {
    return {{prefix}}Storyboard(name: self.storyboardName, bundle: NSBundle(forClass: BundleToken.self))
  }
}

extension StoryboardSceneType where Self: RawRepresentable, Self.RawValue == String {
  func {{controller|lowerFirstWord}}() -> {{baseType}} {
    return Self.storyboard().instantiate{{controller}}WithIdentifier(self.rawValue)
  }
  static func {{controller|lowerFirstWord}}(identifier: Self) -> {{baseType}} {
    return identifier.{{controller|lowerFirstWord}}()
  }
}

protocol StoryboardSegueType: RawRepresentable { }

extension {% if isAppKit %}NSSeguePerforming{% else %}{{baseType}}{% endif %} {
  func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier{% if isAppKit %}?{% endif %}(segue.rawValue, sender: sender)
  }
}

{# This is where the generation begins, this code depends on what you have in your Storyboards #}
// swiftlint:disable explicit_type_interface identifier_name line_length type_body_length type_name
{% set sceneEnumName %}{{param.sceneEnumName|default:"StoryboardScene"}}{% endset %}
{% macro className scene %}{% if scene.customClass %}{% if scene.customModule %}{{scene.customModule}}.{% endif %}{{scene.customClass}}{% else %}{{prefix}}{{scene.baseType}}{% endif %}{% endmacro %}
enum {{sceneEnumName}} {
  {% for storyboard in storyboards %}
  {% set storyboardName %}{{storyboard.name|swiftIdentifier|escapeReservedKeywords}}{% endset %}
  enum {{storyboardName}}: {% if storyboard.scenes %}String, {% endif %}StoryboardSceneType {
    static let storyboardName = "{{storyboard.name}}"
    {% if storyboard.initialScene %}

    {% set sceneClass %}{% call className storyboard.initialScene %}{% endset %}
    {% set castAsClass %}{% if isAppKit or storyboard.initialScene.baseType != "ViewController" %} as? {{sceneClass}}{% endif %}{% endset %}
    static func initialViewController() -> {{sceneClass}} {
      guard let controller = storyboard().instantiateInitialViewController(){{castAsClass}} else {
        fatalError("Failed to instantiate initialViewController for \(self.storyboardName)")
      }
      return controller
    }
    {% endif %}
    {% if storyboard.scenes %}
    {% for scene in storyboard.scenes %}
    {% set sceneID %}{{scene.identifier|swiftIdentifier}}{% endset %}

    case {{sceneID}}Scene = "{{scene.identifier}}"
    {% set sceneClass %}{% call className scene %}{% endset %}
    static func instantiate{{sceneID|snakeToCamelCase}}() -> {{sceneClass}} {
      {% if isAppKit or scene.baseType != "ViewController" %}
      guard let controller = {{sceneEnumName}}.{{storyboardName}}.{{sceneID}}Scene.{{controller|lowerFirstWord}}() as? {{sceneClass}} else {
        fatalError("{{controller}} '{{scene.identifier}}' is not of the expected class {{sceneClass}}.")
      }
      return controller
      {% else %}
      return {{sceneEnumName}}.{{storyboardName}}.{{sceneID}}Scene.{{controller|lowerFirstWord}}()
      {% endif %}
    }
    {% endfor %}
    {% endif %}
  }
  {% endfor %}
}

enum {{param.segueEnumName|default:"StoryboardSegue"}} {
  {% for storyboard in storyboards where storyboard.segues %}
  enum {{storyboard.name|swiftIdentifier|escapeReservedKeywords}}: String, StoryboardSegueType {
    {% for segue in storyboard.segues %}
    {% set segueID %}{{segue.identifier|swiftIdentifier}}{% endset %}
    case {{segueID|escapeReservedKeywords}}{% if segueID != segue.identifier %} = "{{segue.identifier}}"{% endif %}
    {% endfor %}
  }
  {% endfor %}
}
// swiftlint:enable explicit_type_interface identifier_name line_length type_body_length type_name

private final class BundleToken {}
{% else %}
// No storyboard found
{% endif %}
